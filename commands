For real robot use:
-------------------
# Get owner rights for the USB port (replace "cristi" with your own username)
sudo chown cristi /dev/ttyU*

# Check if the controllers have the angle limits set: (Elod did something with them)
roslaunch bottle_demo check_if_controllers_are_prepared.launch

# If the controllers do NOT have the angle limits set, use the prepare_controller_X.launch (where X is 5 or 6) files from the bottle_demo package.


# Start the controllers for the robotic arm:
roslaunch bottle_demo controllers.launch

# Start the detection application:
roslaunch bottle_demo kinect.launch

# Start MoveIt! for arm trajectory planning and visualizing the system:
roslaunch bottle_demo moveit.launch

===================

For simulation:
---------------

roslaunch bottle_demo simulated_controllers.launch
roslaunch bottle_demo simulated_kinect.launch
roslaunch bottle_demo simulated_moveit.launch

===================

Lower-level stuff:
------------------

# Examine motor feedback
rostopic echo /motor_states/port_0

# Start the controllers
roslaunch cyton_controllers start_controller.launch

# Publish a position command
rostopic pub -1 /wrist_roll_position_controller/command std_msgs/Float64 -- 1.5

rosrun cyton_controllers dynamixel_joint_state_publisher.py
roslaunch cyton_gamma_1500_moveit_conf move_group.launch
roslaunch cyton_gamma_1500_moveit_conf moveit_rviz.launch

# Save point clouds in binary format, using the pointcloud_pcd_binary package
