#!/usr/bin/env python
PACKAGE="detection"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

detection_method = gen.enum([
						gen.const("Extraction",     int_t, 0, "Extract all the planes and find the shape in the remaining points."),
						gen.const("Clustering",     int_t, 1, "Divide the area into objects. Find the object that matches the model.")
						],
					"The method used for detection.")
gen.add("detection_method", int_t, 0,
	"The method used for detection.",
	0, 0, 1,
	edit_method=detection_method)


shape_enum = gen.enum([gen.const("Cylinder",   int_t, 0, "Cylinder"),
                       gen.const("Sphere",     int_t, 1, "Sphere")],
                     "A shape.")
gen.add("shape", int_t, 0,
	"The shape to be detected.",
	0, 0, 1,
	edit_method=shape_enum)

normal_estimation = gen.add_group("normal_estimation")
normal_estimation.add("radius_search", double_t, 0,
	"The radius in which we search for neighbors for normal estimation.",
	0.015, 0.005, 0.05)

statistical_outlier = gen.add_group("statistical_outlier")
statistical_outlier.add("mean_k", int_t, 0,
   "The number of neighbours to be considered.", 100, 0, 1000)
statistical_outlier.add("mul_tresh", double_t, 0,
   "Points with a distance larger than (this * standard deviation of the mean distance) will be outliers.",
	1.0, 0.01, 10.0)

segmentation_plane = gen.add_group("segmentation_plane")
segmentation_plane.add("plane_segmentation_distance_treshold", double_t, 0,
	"The maximum distance between the cloud points and the mathematical model of the plane.",
	0.01, 0.001, 0.02)
segmentation_plane.add("plane_segmentation_minimum_points", int_t, 0,
	"The minimum number of points that the plane must have.",
	8000, 0, 20000)
	
segmentation_cylinder = gen.add_group("segmentation_cylinder")
segmentation_cylinder.add("cylinder_segmentation_distance_treshold", double_t, 0,
	"The maximum distance between the cloud points and the mathematical model of the cylinder.",
	0.02, 0.01, 0.25)
segmentation_cylinder.add("cylinder_min_radius", double_t, 0,
	"The minimum radius of the cylinder.",
	0.01, 0.001, 0.05)
segmentation_cylinder.add("cylinder_max_radius", double_t, 0,
	"The maximum radius of the cylinder.",
	0.05, 0.001, 0.10)
	
segmentation_sphere = gen.add_group("segmentation_sphere")
segmentation_sphere.add("sphere_segmentation_distance_treshold", double_t, 0,
	"The maximum distance between the cloud points and the mathematical model of the cylinder.",
	0.02, 0.01, 0.25)
segmentation_sphere.add("sphere_min_radius", double_t, 0,
	"The minimum radius of the cylinder.",
	0.05, 0.001, 0.20)
segmentation_sphere.add("sphere_max_radius", double_t, 0,
	"The maximum radius of the cylinder.",
	0.10, 0.001, 0.20)
	
smoothing = gen.add_group("smoothing")
smoothing.add("enabled", bool_t, 0,
	"Enable smoothing",
	True, False, True)
smoothing.add("smoothing_search_radius", double_t, 0,
	"The radius around which we search for points for smoothing the areas.",
	0.01, 0.0, 0.25);
	
clustering = gen.add_group("clustering")
clustering.add("cluster_min_size", int_t, 0,
	"The minimum number of points of a cluster.",
	1000, 0, 5000)
clustering.add("cluster_max_size", int_t, 0,
	"The maximum number of points of a cluster.",
	100000, 1000, 1000000)
clustering.add("neighbors", int_t, 0,
	"The number of neighbors to be considered for the checks.",
	100, 30, 500)
clustering.add("smoothness_treshold", double_t, 0,
	"The maximum angle (in degrees) between normals of a point and its neighbors from the same cluster.",
	3.5, 1.0, 10.0)
clustering.add("curvature_treshold", double_t, 0,
	"The disparity between curvatures will be checked.",
	0.07, 0.001, 5.0)
	
exit(gen.generate(PACKAGE, "create_description", "Parameters"))
